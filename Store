package products;

import java.util.*;

public class Store {
    static Scanner scn = new Scanner(System.in);

    // Use meaningful names for variables
    static Queue<Double> resultQuant = new LinkedList<>();
    static Queue<String> resultName = new LinkedList<>();
    static Queue<Double> resultPrice = new LinkedList<>();
    
    
    static LinkedHashMap<String, String> prodHash = new LinkedHashMap<>();
    static ArrayList<Integer> quantity = new ArrayList<>();
    static ArrayList<Double> price = new ArrayList<>();
    static Queue<Double> quan = new LinkedList<>();
    
    static Queue<String> orderedProd = new LinkedList<>();
    static Queue<Double> orderedQuantity = new LinkedList<>();
    static Queue<Double> orderedPrice = new LinkedList<>();
    static Computation c = new Computation();

    static Queue<String> cancProd = new LinkedList<>();

    // Initialize product details
   	static void products() {
		prodHash.put("00001","Dozen of eggs     ");
		prodHash.put("00002","50 kg Rice        ");
		prodHash.put("00003","50 kg BrownRice   ");
		prodHash.put("00004","Cooking Oil       ");
		prodHash.put("00005","Vinegar / Suka    ");
		prodHash.put("00006","Bottled Water     ");
		prodHash.put("00007","Pack of Coffee    ");
		prodHash.put("00008", "Milk Shake       ");
		prodHash.put("00009", "Ice Cream        ");
		prodHash.put("00010", "Pack of Sugar    ");
		prodHash.put("00011", "Soda Drink       ");
		prodHash.put("00012", "Corned Beef      ");
		prodHash.put("00013", "All purpose Cream");
		
	}
	
       	public static void buyProd(){
	
	
        
			Collections.addAll(quantity, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100);
			Collections.addAll(price,230.00, 2000.00, 2500.00, 130.00, 250.00, 25.00, 180.00 , 100.00, 300.00, 270.00, 85.00, 70.00, 150.00);
			
			products();		
			System.out.println("\t \t \t==================================================================================================================");
			System.out.println("\t \t \t \t" + "Code \t " + "Product \t \t \t \t \t \t \t" + "Quantity    " + "Price \n");
			
			
			
			int incre = 0;
			for(Map.Entry <String , String> e : prodHash.entrySet()) {
				for (int i = 0; i < 1; i++) {
					
					System.out.print("\t \t \t \t" + e.getKey());
					System.out.print("\t" + e.getValue());
					
					System.out.print("\t \t \t \t \t \t" + quantity.get(incre));
					System.out.println("         "  + price.get(incre));
					incre++;
				}
                        }
        	
                  
    
        boolean isDone = false;
           System.out.println("\t \t \t==================================================================================================================");
        while (!isDone) {
            System.out.println("\t \t \t \t" + "PLEASE TYPE [X] WHEN YOU ARE DONE.");
            System.out.print("\t \t \t \t" + "Enter product id: \t \t");
            String prodId = scn.next();

            if (prodId.equalsIgnoreCase("X")) {
                isDone = true;
                break;
            }

            System.out.print("\t \t \t \t" + "Enter product quantity: \t");
            double qt = scn.nextDouble();

            System.out.println();
            if (!prodId.equalsIgnoreCase("X") || qt == 0) {
                resultName.offer(prodHash.get(prodId));
                resultQuant.offer(qt);
            }
        }
    
                System.out.println("\t \t \t==================================================================================================================");
           System.out.println("\t \t \t \t|Product| \t \t \t \t \t|Quantity|         |Price|");

           while (!resultName.isEmpty()) {
               System.out.print("\t \t \t \t" + resultName.peek());
               System.out.print("\t \t \t \t " + resultQuant.peek());
               System.out.println("\t \t \t \t " + resultPrice.peek());

               orderedProd.offer(resultName.poll());
               orderedQuantity.offer(resultQuant.poll());
               orderedPrice.offer(resultPrice.poll());
           }
            
        
           Computation.computationProcess();
           displayPayment();
        }

    public static void displayPayment() {
        System.out.println();
        System.out.println("\t \t \t------------------------------------------------------------------------------------------------------------------");

        System.out.println("\t \t \t \t \t \t \t \t \t \tTAXABLE TOTAL    : " + Computation.totalPrice);
        System.out.println("\t \t \t \t \t \t \t \t \t \tVat(12%)         : " + Computation.vatPrice + "\n");
        System.out.println("\t \t \t \t \t \t \t \t \t \tTOTAL            : " + Computation.pricewCharge);

        System.out.println("\t \t \t------------------------------------------------------------------------------------------------------------------\n");
        System.out.println("\t \t \t \t" + "==================================");
        System.out.println("\t \t \t \t" + "| 1. Pay                         |");
        System.out.println("\t \t \t \t" + "| 2. Cancel product              |");
        System.out.println("\t \t \t \t" + "| 3. Exit                        |");
        System.out.println("\t \t \t \t" + "==================================");
        System.out.print("\t \t \t \t" + "Enter your choice: ");
        int choice = scn.nextInt();
        switch (choice) {
            case 1 -> {
                System.out.print("\t \t \t \t \t \t \t \t \t \t \t AMOUNT  : ");
                double cash = scn.nextDouble();
                double change = cash - Computation.pricewCharge;
                Math.round(change);
                System.out.println("\t \t \t \t \t \t \t \t \t \t \t CASH    : " + cash);
                System.out.println("\t \t \t \t \t \t \t \t \t \t \t CHANGE  : " + change);
            }
            case 2 -> cancelProduct();
            case 3 -> Products.displayMenu();
            
            default -> {
                System.out.println("\t \t \t \t" + "Invalid input. Try again.");
                displayPayment();
            }
        }
    }

	static Queue <Double> quant = new LinkedList();
	static Queue <String> cancProd2 = new LinkedList();
	static Queue <Double> quant2 = new LinkedList(); 
	static Queue <String> cancProd3 = new LinkedList();
	
        
    public static void cancelProduct() {
       
                        System.out.println("\t \t \t \t" + "PLEASE ENTER [X] WHEN YOU ARE DONE");
                        boolean isDone = false;

                        while (!isDone) {
                            System.out.print("\t \t \t \t" + "Enter product id: \t \t");
                            String prodId = scn.next();

                            if (prodId.equalsIgnoreCase("X")) {
                                isDone = true;
                                break;
                            }

                            System.out.print("\t \t \t \t" + "Enter product quantity: \t");
                            double qt = scn.nextDouble();
                            System.out.println();

                            if (!prodId.equalsIgnoreCase("X") && qt != 0) {
                                resultName.offer(prodHash.get(prodId));
                                resultQuant.offer(qt);
                            }
                       
		}
		if(!cancProd.isEmpty()) {
		System.out.println("\t \t \t==================================================================================================================");
		System.out.println("\t \t \t \t|Product| \t \t \t \t \t|Quantity|         |Price|");
		System.out.println("\t \t \t==================================================================================================================");
		
				while(!cancProd.isEmpty()) {
				System.out.print("\t \t \t \t" + cancProd.peek());
				System.out.print("\t \t \t \t" + quant.peek());
				
				cancProd2.offer(cancProd.poll());
				quant2.offer(quant.poll()); 
				int incre3 = 0;
				
					for(Map.Entry <String , String> e : prodHash.entrySet()) {
						if(e.getValue().equals(cancProd2.peek())) {
							System.out.println("\t \t   "+ price.get(incre3));
							orderedPrice.offer(price.get(incre3));
							incre3++;
							cancProd3.offer(cancProd2.poll());
						}
						else {
							incre3++;
						}
					}
				}
				if(cancProd.isEmpty()) {
					c.computationProcessCancel();
					displayPayment();
				}	
		}		
		c.computationProcessCancel();
		displayPayment();
	}
}
